//<auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;

namespace Algorithm
{
    class Utility
    {
        //Calling a word from Scanner
        public static String CallingAWord()
        {
            Console.WriteLine("enter the words ");
            String x = Console.ReadLine();
            return x;

        }
        //permutation
        public static void Permutation(char[] ch, int currentIndex)
        {
            if (currentIndex == ch.Length - 1)
            {
                Console.WriteLine(ch);
            }
            for (int i = currentIndex; i < ch.Length; i++)
            {
                Swap(ch, currentIndex, i);
                Permutation(ch, currentIndex + 1);
                Swap(ch, currentIndex, i);
            }

        }
        //swaping the string
        public static void Swap(char[] ch, int currentindex, int i)
        {
            char temp = ch[currentindex];
            ch[currentindex] = ch[i];
            ch[i] = temp;
        }
        // for convert file to string
        public static string FileElement(string filePath)
        {
            string text = System.IO.File.ReadAllText(filePath);
            Console.WriteLine(text);
            return text;

        }

        // for binary search...........................
        public static int BinarySearc(String[] s1, String x)
        {
            int l = 0, r = s1.Length;
            while (l <= r)
            {
                int m = l + (r - l) / 2;

                int res = x.CompareTo(s1[m]);

                // Check if x is present at mid
                if (res == 0)
                    return m;


                // If x greater, ignore left half
                if (res > 0)
                    l = m + 1;

                // If x is smaller, ignore right half
                else
                    r = m - 1;
            }

            return -1;
        }

        //bubble sort
        public static void Bubble1(int[] array)
        {

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = int.Parse(Console.ReadLine());
            }
            for (int j = 0; j < array.Length; j++)
            {
                for (int i = 0; i < array.Length - 1; i++)
                {

                    if (array[i] > array[i + 1])
                    {
                        int temp = array[i];
                        array[i] = array[i + 1];
                        array[i + 1] = temp;
                    }
                }
            }
            for (int i = 0; i < array.Length; i++)
            {
                Console.WriteLine(array[i]);

            }
        }
        //insertion sort
        public static void Insertion1(String[] str, int l)
        {
            for (int i = 1; i < l; i++)
            {
                for (int j = 0; j < i; j++)
                {
                    if (str[i].CompareTo(str[j]) < 0)
                    {
                        String temp = str[i];
                        str[i] = str[j];
                        str[j] = temp;

                    }

                }
            }
            for (int i = 0; i < l; i++)
            {
                Console.WriteLine(str[i]);

            }
        }
        //reverse of the no.
        public static int Reverse(int i)
        {
            int sum = 0;
            while (i > 0)
            {
                int x = i % 10;

                sum = sum * 10 + x;
                i = i / 10;
            }
            return sum;
        }
        //regex
        public static bool isValidMobileNumber(String inputMobileNumber)
        {
            string strRegex = "[0-9]{10}";
            Regex re = new Regex(strRegex);

            if (re.IsMatch(inputMobileNumber))
                return true;
            else
                return false;
        }
        public static bool isValidUserName(String inputUserName)
        {
            string strRegex = @"[a-z]{3,10}\s[a-z]{3}";
            Regex re = new Regex(strRegex);

            if (re.IsMatch(inputUserName))
                return true;
            else
                return false;
        }
        public static bool isValidDOB(String inputUserName)
        {
            string strRegex = @"[0-9]{1}[1-2]{1}/[0-9]{1}[1-2]{1}/[1-2]{1}[0-9]{3}";
            Regex re = new Regex(strRegex);

            if (re.IsMatch(inputUserName))
                return true;
            else
                return false;
        }

        //anagram
        public static void AnagramTest(char[] first, char[] second)
        {
            int[] arr = new int[26];
            for (int i = 0; i < 26; i++)
            {
                //initially i put 0 to all element
                arr[i] = 0;
            }

            Console.WriteLine("......................................");
            //first char arr
            for (int i = 0; i < first.Length; i++)
            {
                if (first[i] >= 'a' && first[i] <= 'z')
                {
                    int x = first[i] - 'a';
                    arr[x]++;
                }
                else if (first[i] >= 'A' && first[i] <= 'Z')
                {
                    int x = first[i] - 'A';
                    arr[x]++;
                }
            }
            //second char arr
            for (int i = 0; i < second.Length; i++)
            {
                if (second[i] >= 'a' && second[i] <= 'z')
                {
                    int x = second[i] - 'a';
                    arr[x]--;
                }
                else if (second[i] >= 'A' && second[i] <= 'Z')
                {
                    int x = second[i] - 'A';
                    arr[x]--;
                }
            }
            Console.WriteLine("......................................");
            for (int i = 0; i < 26; i++)
            {
                if (arr[i] != 0)
                {
                    Console.WriteLine("Its not an anagram");
                    Environment.Exit(0);
                }

            }
            Console.WriteLine("Its an anagram");
        }
        //prime no.
        public static void Prime(int x)
        {
            for (int i = 2; i < x; i++)
            {
                int count = 0;
                for (int j = 1; j <= i; j++)
                {

                    if (i % j == 0)
                    {
                        count++;
                    }
                }
                if (count == 2)
                {
                    Console.WriteLine(i);
                }
            }
        }
    }

    //merge sort...here i have made a class.
    class MergeSortTest
    {
        int[] array;
        int[] tempMargeArr;
        int length;
        public void Sort(int[] inputArr)
        {
            this.array = inputArr;
            this.length = inputArr.Length;
            this.tempMargeArr = new int[length];

            DivideArray(0, length - 1);
        }

        //this is where our array is subdivide into smaller division this process is continue until the array divide into single form
        public void DivideArray(int lowerIndex, int higherIndex)
        {
            if (lowerIndex < higherIndex)
            {
                int middle = lowerIndex + (higherIndex - lowerIndex) / 2;

                //it will sort the left side of an arr
                DivideArray(lowerIndex, middle);
                //it will sort the right side of an arr
                DivideArray(middle + 1, higherIndex);
                // we have to marge the divide array
                MergeArray(lowerIndex, middle, higherIndex);
            }
            //here i have declere the main algorithm of merge 
        }
        public void MergeArray(int lowerIndex, int middle, int higherIndex)
        {
            

            for (int a = lowerIndex; a <= higherIndex; a++)
            {
                tempMargeArr[a] = array[a];
            }

            int i = lowerIndex;
            int j = middle + 1;
            int k = lowerIndex;

            while (i <= middle && j <= higherIndex)
            {
                if (tempMargeArr[i] <= tempMargeArr[j])
                {
                    array[k] = tempMargeArr[i];
                    i++;

                }
                else
                {
                    array[k] = tempMargeArr[j];
                    j++;
                }
                k++;
            }
            while (i <= middle)
            {
                array[k] = tempMargeArr[i];
                k++;
                i++;
            }
        }
       
    }
}