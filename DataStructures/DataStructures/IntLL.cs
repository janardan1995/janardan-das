
    //<auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;

namespace DataStructures
    {
        public class IntLL
        {

            public Node2 head;
            public class Node2
            {
                public int data;
                public Node2 next;
                public Node2(int d)
                {
                    data = d;
                    next = null;
                }

            }
            //add in the last
            public Node2 AddLast(int data)
            {
                Node2 newNode = new Node2(data);
                if (head == null)
                {
                   return head = newNode;
                }
                else
                {
                    Node2 n = head;
                    while (n.next != null)
                    {
                        n = n.next;
                    }
                   return n.next = newNode;
                }
            }
            //add in first
            public Node2 AddFirst(int data)
            {
                Node2 NewNode = new Node2(data);
                NewNode.next = head;
               return head = NewNode;
            }
            //display the linked list or print
            public void Display(int x)
            {
            Console.WriteLine();
            Console.WriteLine("Linklist elements of {0} are",x);
                Node2 temp = head;
                while (temp != null)
                {
                    Console.Write(temp.data + " ");
                    temp = temp.next;
                }
          
            }
            //delete the element from the linked list if the data is given
            public void DeleteLL(int data)
            {

                // Store head node 
                Node2 temp = head, prev = null;

                // If head node itself holds the key to be deleted 
                if (temp != null && temp.data == data)
                {
                    head = temp.next; // Changed head 
                    return;
                }

                // Search for the key to be deleted, keep track of the 
                // previous node as we need to change temp.next 
                while (temp != null && temp.data != data)
                {
                    prev = temp;
                    temp = temp.next;
                }

                // If key was not present in linked list 
                if (temp == null) return;

                // Unlink the node from linked list 
                prev.next = temp.next;

            }
            //checking whether the element are present on the link list or not
            public bool CheckLL(int data)
            {
                Node2 temp = head;
                if (temp != null && temp.data == data)
                {
                    Console.WriteLine("element is found");
                    return true;
                }
                while (temp != null && temp.data != data)
                {
                    temp = temp.next;
                }
                if (temp == null)
                {
                    Console.WriteLine("element not found");
                    return false;
                }
                else
                {
                    Console.WriteLine("element found");
                    return true;
                }
            }
            //adding the linklist to a given string
            public void WriteFile()
            {
                StringBuilder sb = new StringBuilder();
                Node2 temp = head;
                while (temp != null)
                {
                    sb.Append(temp.data + " ");
                    temp = temp.next;
                }
                string sb1 = sb.ToString();
                System.IO.File.WriteAllText(@"C:\Users\Neelabh\Desktop\GitHub\dataStructure\DataStructures\DataStructures\TextFile1.txt", sb1);

            }
        public void MemArr()
        {
            Node2[] arr = new Node2[11];
        }
        }
    }

